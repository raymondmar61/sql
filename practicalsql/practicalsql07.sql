#Chapter 07 Table Design That Works For You (p 93)
--Additional constraint types:  Check evalulates whether the data falls within values we specify.  Unique ensures that values in a column or group of columns are unique in each row in the table.  Not Null prevents null values in a column.
--A column constraint applies to the column declared with the column name and data type.
--A table constraint applies to one or more columns declared after defining all the table columns.
--Referential integrity ensures rows in related tables have matching values when we expect them to.
--Natural key is using one or more of the table's existing columns rather than creating a column and filling it with articial values to act as keys.  e.g. Driver's license number, part number, serial number, book's ISBN.
--Surrogate key is a single column that you fill with artificial values.  e.g. a sequential number auto-generated by the database like auto-incrementing integers.
--A composite primary key is a key from a combination of columns.  Example below
create table natural_key_composite_example (student_id varchar(10), school_day date, present boolean, constraint student_key primary key (student_id, school_day));
insert into natural_key_composite_example (student_id, school_day, present)
values (775, '1/22/2017', 'Y'), (775, '1/23/2017', 'Y');
insert into natural_key_composite_example (student_id, school_day, present)
values (775, '1/23/2017', 'N');  --error message because student_id and school_day match a combination which already exists.

--Author recommends using bigserial data type when creating a surrogate key via auto-incrementing integers.
create table surrogate_key_example (order_number bigserial, product_name varchar(50), order_date date, constraint order_key primary key (order_number));
insert into surrogate_key_example (product_name, order_date)
values ('beachball polish', '2015-03-17'), ('wrinkle de-atomizer', '2017-05-22'), ('flux capacitor', '1985-10-26');

--A foreign key is one or more columns in a table which match the primary key of another table.  Foreign key values must exist in the primary key table it references.  Also, the foreign key constraint prevents us from deleting a row before removing any related rows.  No orphaned records.
create table licenses (license_id varchar(10), first_name varchar(50), last_name varchar(50), constraint licenses_key primary key (license_id));
create table registrations (registration_id varchar(10), registration_date date, license_id varchar(10) references licenses (license_id), constraint registration_key primary key (registration_id, license_id));  --registration_key is a composite primary key to column registration_id and column license_id because a license_id can register multiple vehicles and a registration_id can be owned by multiple license_id.
--To delete a row in the primary key table and its related records in foreign key tables, add on delete cascade when defining the foreign key constraint.  e.g. delete a row in licenses table should delete related rows in registrations table.
create table registrations (registration_id varchar(10), registration_date date, license_id varchar(10) references licenses (license_id) on delete cascade, constraint registration_key primary key (registration_id, license_id));

--A check constraint evaluates whether data added to a column meets the expected criteria which we specify with a logical test.  Declare a column constraint after the column name and data type or check (logical expression).  Declare a table constraint after all columns are defined or constraint constraintname check (logical expression).
create table check_constraint_example (user_id bigserial, user_role varchar(50), salary integer, constraint user_id_key primary key (user_id), constraint check_role_in_list check (user_role in('Admin', 'Staff')), constraint check_salary_not_zero check (salary > 0));
--We can combine more than one test.
constraint constraintname check (credits >=120 and tuition = 'Paid')
--We can reference columns in a table.
constraint constraintname check (sale_price < retail_price)

--A unique constraint ensures a column has a unique value.  Null is okay.
create table unique_constraint_example (contact_id bigserial constraint contact_id_key primary key, first_name varchar(50), last_name varchar(50), email varchar(200), constraint email_unique unique (email));

--Not null constraint requires a value in a column.
create table not_null_example (student_id bigserial, first_name varchar(50) not null, last_name varchar(50) not null, constraint student_id_key primary key (student_id));

--Delete constraint or remove constraint
alter table tablename drop constraint constraintname;
--However, to delete a not null constraint,
alter table tablename alter column columnname drop not null;
--Insert constriant or add constraint
alter table tablename add constraint constraintname constrainttype;
--Insert constriant or add constraint examples.  Also edit constraint.
alter table not_null_example add constraint student_id_key primary key (student_id);
alter table not_null_example alter column first_name set not null;

--Speed up queries by adding an index to one or more columns like a book's index.  A primary key constraint or unique constraint places an index on the column.  Also, executing a create index statement.
--However, indexes enlarge the database and impose a maintenance cost on writing data.
--PostgreSQL defaut index type is the B-Tree index short for balanced tree because the structure organizes the data in a way that when you search for a value, it looks from the top of the three down through branches until it locates the data you want.  There are additional index types including the Generalized Inverted Index and the Generalized Search Tree.
--RM:  I didn't create the table new_york_addresses and I didn't import the .csv file.
create table new_york_addresses (longitude numeric(9,6), latitude numeric(9,6), street_number varchar(10), street varchar(32), unit varchar(7), postcode varchar(5), id integer constraint new_york_key primary key);
copy new_york_addresses
from 'i:\program files\postgresql\city_of_new_york.csv'
with (format csv, header);
--The explain command provides output information for a specific database query.  If we add analyze keyword, explain carries out the query and show the actual execution time.
EXPLAIN ANALYZE SELECT * FROM new_york_addresses
WHERE street = 'BROADWAY';
EXPLAIN ANALYZE SELECT * FROM new_york_addresses
WHERE street = '52 STREET';
EXPLAIN ANALYZE SELECT * FROM new_york_addresses
WHERE street = 'ZWICKY AVENUE';
--Create an index
create index indexname on table (columnname);
CREATE INDEX street_idx ON new_york_addresses (street);
--Drop an index
drop index indexname;